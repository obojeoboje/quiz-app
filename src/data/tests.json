[
  {
  "title": "REST API — Тест 1",
  "topic": "REST API",
  "questions": [
    {
      "question": "Что означает метод GET?",
      "options": ["Создание ресурса", "Удаление ресурса", "Получение ресурса", "Обновление ресурса"],
      "answer": 2
    },
    {
      "question": "Какой код ответа означает успех?",
      "options": ["200", "404", "500", "403"],
      "answer": 0
    },
    {
      "question": "Что означает метод POST?",
      "options": ["Удаление ресурса", "Создание нового ресурса", "Получение ресурса", "Обновление ресурса"],
      "answer": 1
    },
    {
      "question": "Что делает метод PUT?",
      "options": ["Создаёт новый ресурс", "Обновляет существующий ресурс", "Удаляет ресурс", "Получает список ресурсов"],
      "answer": 1
    },
    {
      "question": "Что означает код 404?",
      "options": ["Ресурс не найден", "Ошибка сервера", "Доступ запрещён", "Успешный ответ"],
      "answer": 0
    },
    {
      "question": "Какой формат чаще всего используется в REST API?",
      "options": ["CSV", "JSON", "DOCX", "PDF"],
      "answer": 1
    },
    {
      "question": "Что такое эндпоинт (endpoint)?",
      "options": ["Метод API", "URL, по которому доступен ресурс", "Формат данных", "Ключ авторизации"],
      "answer": 1
    },
    {
      "question": "Что делает метод DELETE?",
      "options": ["Создаёт ресурс", "Обновляет ресурс", "Удаляет ресурс", "Получает ресурс"],
      "answer": 2
    },
    {
      "question": "Какой заголовок обычно используется для указания типа содержимого?",
      "options": ["Content-Type", "Authorization", "Accept", "User-Agent"],
      "answer": 0
    },
    {
      "question": "Какой код ответа означает 'Нет контента'?",
      "options": ["200", "201", "204", "400"],
      "answer": 2
    }
  ]
},
  {
  "title": "SQL — Тест 1",
  "topic": "SQL",
  "questions": [
    {
      "question": "Какой оператор используется для выборки данных?",
      "options": ["SELECT", "INSERT", "UPDATE", "DELETE"],
      "answer": 0
    },
    {
      "question": "Как выбрать все столбцы из таблицы?",
      "options": ["SELECT *", "SELECT ALL", "GET *", "FETCH ALL"],
      "answer": 0
    },
    {
      "question": "Какой оператор используется для добавления новых данных?",
      "options": ["INSERT", "ADD", "UPDATE", "APPEND"],
      "answer": 0
    },
    {
      "question": "Что делает оператор WHERE?",
      "options": ["Сортирует данные", "Фильтрует строки по условию", "Обновляет данные", "Создаёт таблицу"],
      "answer": 1
    },
    {
      "question": "Какой оператор изменяет существующие данные?",
      "options": ["MODIFY", "CHANGE", "UPDATE", "ALTER"],
      "answer": 2
    },
    {
      "question": "Какой оператор удаляет строки из таблицы?",
      "options": ["REMOVE", "DELETE", "DROP", "TRUNCATE"],
      "answer": 1
    },
    {
      "question": "Как объединить строки из двух таблиц по общему полю?",
      "options": ["JOIN", "UNION", "MERGE", "GROUP"],
      "answer": 0
    },
    {
      "question": "Что делает оператор ORDER BY?",
      "options": ["Фильтрует строки", "Удаляет строки", "Сортирует строки", "Объединяет таблицы"],
      "answer": 2
    },
    {
      "question": "Как посчитать количество строк в таблице?",
      "options": ["SUM()", "COUNT()", "LENGTH()", "TOTAL()"],
      "answer": 1
    },
    {
      "question": "Какая команда используется для изменения структуры таблицы?",
      "options": ["UPDATE", "CHANGE", "ALTER", "MODIFY"],
      "answer": 2
    }
  ]
},
{
  "title": "Devtools — Тест 1",
  "topic": "Devtools",
  "questions": [
    {
      "question": "Какая вкладка Devtools используется для анализа HTML-кода страницы?",
      "options": ["Console", "Elements", "Network", "Sources"],
      "answer": 1
    },
    {
      "question": "Где можно посмотреть ошибки JavaScript?",
      "options": ["Elements", "Sources", "Console", "Application"],
      "answer": 2
    },
    {
      "question": "Что отображается во вкладке Network?",
      "options": [
        "Запросы к серверу и ответы",
        "Ошибки JavaScript",
        "HTML-код страницы",
        "Куки и локальное хранилище"
      ],
      "answer": 0
    },
    {
      "question": "Какой статус-код означает успешный ответ сервера?",
      "options": ["404", "200", "500", "403"],
      "answer": 1
    },
    {
      "question": "Как перехватить и проанализировать запрос в Devtools?",
      "options": [
        "Перейти во вкладку Console",
        "Открыть вкладку Elements",
        "Включить фильтр во вкладке Network",
        "Открыть вкладку Performance"
      ],
      "answer": 2
    },
    {
      "question": "Где можно посмотреть куки и LocalStorage?",
      "options": ["Elements", "Network", "Console", "Application"],
      "answer": 3
    },
    {
      "question": "Можно ли с помощью Devtools отредактировать CSS на странице?",
      "options": ["Нет", "Да, во вкладке Elements", "Только с расширениями", "Только через сервер"],
      "answer": 1
    },
    {
      "question": "Что показывает вкладка Performance?",
      "options": ["Время загрузки и поведение страницы", "Ошибки верстки", "Файл robots.txt", "Только JS-ошибки"],
      "answer": 0
    },
    {
      "question": "Как вызвать Devtools в Chrome?",
      "options": ["Alt + F4", "Ctrl + P", "F12 или Ctrl + Shift + I", "Ctrl + Shift + Del"],
      "answer": 2
    },
    {
      "question": "Что можно делать во вкладке Sources?",
      "options": [
        "Редактировать базу данных",
        "Просматривать и отлаживать JS-код",
        "Устанавливать расширения",
        "Запускать запросы к API"
      ],
      "answer": 1
    }
  ]
},
{
  "title": "Postman — Тест 1",
  "topic": "Postman",
  "questions": [
    {
      "question": "Для чего используется Postman?",
      "options": [
        "Тестирование веб-интерфейса",
        "Отправка и тестирование HTTP-запросов",
        "Редактирование баз данных",
        "Создание сайтов"
      ],
      "answer": 1
    },
    {
      "question": "Какой HTTP-метод чаще всего используется для получения данных?",
      "options": ["POST", "PUT", "GET", "DELETE"],
      "answer": 2
    },
    {
      "question": "Что такое коллекция в Postman?",
      "options": [
        "Список пользователей",
        "Набор тестов",
        "Набор связанных запросов",
        "Группа переменных"
      ],
      "answer": 2
    },
    {
      "question": "Какой статус-код означает успешный POST-запрос?",
      "options": ["200", "201", "204", "400"],
      "answer": 1
    },
    {
      "question": "Можно ли сохранять переменные в Postman?",
      "options": ["Нет", "Да, в окружениях (environments)", "Только вручную", "Только через плагины"],
      "answer": 1
    },
    {
      "question": "Что делает вкладка Body в Postman?",
      "options": [
        "Отображает логи",
        "Позволяет задать тело запроса",
        "Показывает статус ответа",
        "Проверяет ошибки"
      ],
      "answer": 1
    },
    {
      "question": "Какой тип тела запроса нужно выбрать для отправки JSON?",
      "options": ["form-data", "x-www-form-urlencoded", "raw + JSON", "text"],
      "answer": 2
    },
    {
      "question": "Можно ли автоматизировать тесты в Postman?",
      "options": ["Нет", "Да, с помощью скриптов в Tests", "Только через API", "Только вручную"],
      "answer": 1
    },
    {
      "question": "Что отображается во вкладке Headers?",
      "options": [
        "Список пользователей",
        "Ответ сервера",
        "Заголовки запроса и ответа",
        "Тело запроса"
      ],
      "answer": 2
    },
    {
      "question": "Какой тип запроса стоит выбрать для обновления ресурса?",
      "options": ["GET", "POST", "PUT", "DELETE"],
      "answer": 2
    }
  ]
},
{
  "title": "Charles Proxy — Тест 1",
  "topic": "Charles Proxy",
  "questions": [
    {
      "question": "Для чего используется Charles Proxy?",
      "options": [
        "Создание веб-сайтов",
        "Тестирование интерфейса",
        "Просмотр и анализ сетевого трафика",
        "Запуск автотестов"
      ],
      "answer": 2
    },
    {
      "question": "Какой протокол Charles может перехватывать и расшифровывать при правильной настройке?",
      "options": ["HTTP", "HTTPS", "FTP", "SSH"],
      "answer": 1
    },
    {
      "question": "Что необходимо установить для просмотра HTTPS-трафика в Charles?",
      "options": [
        "Расширение для браузера",
        "VPN-сервис",
        "Сертификат Charles",
        "Фаервол"
      ],
      "answer": 2
    },
    {
      "question": "Как называется функция Charles, позволяющая изменить запрос до его отправки?",
      "options": ["Map Remote", "Throttle", "Breakpoint", "Rewrite"],
      "answer": 2
    },
    {
      "question": "Что делает функция Throttle?",
      "options": [
        "Фильтрует запросы",
        "Ограничивает скорость соединения",
        "Удаляет куки",
        "Перезапускает сервер"
      ],
      "answer": 1
    },
    {
      "question": "Можно ли с помощью Charles увидеть запросы от мобильного устройства?",
      "options": ["Нет", "Да, если подключить его к одной сети и настроить прокси", "Только через эмулятор", "Только через Wi-Fi роутер"],
      "answer": 1
    },
    {
      "question": "Как включить или выключить захват трафика в Charles?",
      "options": ["Кнопкой Record/Stop", "Вкладкой Tools", "Через настройки SSL", "Это происходит автоматически"],
      "answer": 0
    },
    {
      "question": "Как сохранить сетевой лог в Charles?",
      "options": [
        "Через кнопку Save или File > Save Session",
        "Нельзя сохранять",
        "Только через консоль",
        "Комбинацией клавиш Ctrl + S"
      ],
      "answer": 0
    },
    {
      "question": "Что показывает вкладка Structure в Charles?",
      "options": [
        "Тело ответа",
        "Дерево запросов по доменам",
        "Список ошибок",
        "Параметры прокси"
      ],
      "answer": 1
    },
    {
      "question": "Какая вкладка показывает сырой запрос и ответ?",
      "options": ["Overview", "Contents", "Raw", "Headers"],
      "answer": 2
    }
  ]
},
{
  "title": "Клиент-серверная архитектура — Тест 1",
  "topic": "Клиент-серверная архитектура",
  "questions": [
    {
      "question": "Что такое клиент в клиент-серверной архитектуре?",
      "options": [
        "Центральный сервер базы данных",
        "Устройство или приложение, отправляющее запрос",
        "Программа для администрирования",
        "Сервер, обрабатывающий данные"
      ],
      "answer": 1
    },
    {
      "question": "Что такое сервер в клиент-серверной архитектуре?",
      "options": [
        "Устройство пользователя",
        "Программа, получающая и обрабатывающая запросы от клиента",
        "Операционная система",
        "Сеть, соединяющая компьютеры"
      ],
      "answer": 1
    },
    {
      "question": "Какой из следующих примеров относится к клиенту?",
      "options": ["Веб-браузер", "СУБД", "HTTP-протокол", "DNS-сервер"],
      "answer": 0
    },
    {
      "question": "Что означает запрос от клиента к серверу?",
      "options": [
        "Клиент получает данные",
        "Клиент инициирует соединение и передает данные",
        "Сервер запрашивает информацию",
        "Сервер завершает соединение"
      ],
      "answer": 1
    },
    {
      "question": "Что отвечает на запрос клиента?",
      "options": ["Браузер", "Сеть", "Сервер", "Брандмауэр"],
      "answer": 2
    },
    {
      "question": "Какой протокол чаще всего используется для общения клиента и сервера в вебе?",
      "options": ["FTP", "SMTP", "HTTP/HTTPS", "SSH"],
      "answer": 2
    },
    {
      "question": "Что такое IP-адрес в контексте клиент-серверной архитектуры?",
      "options": [
        "Название сервера",
        "Идентификатор пакета данных",
        "Уникальный адрес устройства в сети",
        "Тип подключения"
      ],
      "answer": 2
    },
    {
      "question": "Что такое порт?",
      "options": [
        "Номер запроса",
        "Скорость соединения",
        "Протокол безопасности",
        "Точка доступа к определённой службе на сервере"
      ],
      "answer": 3
    },
    {
      "question": "Как называется модель, в которой клиент и сервер могут одновременно выполнять задачи?",
      "options": ["Синхронная", "Асинхронная", "Монотонная", "Прямая"],
      "answer": 1
    },
    {
      "question": "Какой компонент отвечает за маршрутизацию запросов от клиента к нужному серверу?",
      "options": ["Браузер", "Маршрутизатор", "Клиент", "Хост"],
      "answer": 1
    }
  ]
},
{
  "title": "Виды тестирования — Тест 1",
  "topic": "Виды тестирования",
  "questions": [
    {
      "question": "Какой вид тестирования проверяет весь продукт как единое целое?",
      "options": ["Модульное", "Интеграционное", "Системное", "Приёмочное"],
      "answer": 2
    },
    {
      "question": "Что такое регрессионное тестирование?",
      "options": [
        "Тестирование нового функционала",
        "Проверка совместимости с разными устройствами",
        "Убедиться, что изменения не повлияли на существующий функционал",
        "Тестирование только пользовательского интерфейса"
      ],
      "answer": 2
    },
    {
      "question": "Какой вид тестирования выполняется пользователями или заказчиками?",
      "options": ["Юнит-тестирование", "Системное тестирование", "Приёмочное тестирование", "Интеграционное тестирование"],
      "answer": 2
    },
    {
      "question": "Что такое smoke-тестирование (дымовое)?",
      "options": [
        "Полное тестирование функциональности",
        "Минимальная проверка на работоспособность продукта",
        "Нагрузочное тестирование",
        "Тестирование безопасности"
      ],
      "answer": 1
    },
    {
      "question": "Какой вид тестирования проверяет взаимодействие между модулями?",
      "options": ["Модульное", "Интеграционное", "Системное", "Регрессионное"],
      "answer": 1
    },
    {
      "question": "Какая цель exploratory-тестирования?",
      "options": [
        "Следовать заранее написанным тест-кейсам",
        "Анализировать нагрузку",
        "Исследовать продукт без заранее определённого сценария",
        "Автоматизировать тесты"
      ],
      "answer": 2
    },
    {
      "question": "Когда обычно проводится приёмочное тестирование?",
      "options": [
        "После написания требований",
        "После юнит-тестов",
        "Перед передачей продукта заказчику",
        "После релиза"
      ],
      "answer": 2
    },
    {
      "question": "Что из этого является нефункциональным тестированием?",
      "options": ["Регрессионное", "Системное", "Нагрузочное", "Интеграционное"],
      "answer": 2
    },
    {
      "question": "Что проверяет тестирование совместимости?",
      "options": [
        "Производительность",
        "Работу продукта в разных условиях (браузеры, ОС, устройства)",
        "Работу API",
        "Ошибки интерфейса"
      ],
      "answer": 1
    },
    {
      "question": "Какой вид тестирования помогает определить, выдержит ли система высокую нагрузку?",
      "options": ["Интеграционное", "Юнит-тестирование", "Нагрузочное", "Смоук-тестирование"],
      "answer": 2
    }
  ]
},
{
  "title": "Техники тест-дизайна — Тест 1",
  "topic": "Техники тест-дизайна",
  "questions": [
    {
      "question": "Что такое эквивалентное разбиение?",
      "options": [
        "Проверка всех возможных значений",
        "Тестирование на основе бизнес-логики",
        "Разделение входных данных на группы, которые обрабатываются одинаково",
        "Создание тестов без документации"
      ],
      "answer": 2
    },
    {
      "question": "Для чего используется анализ граничных значений?",
      "options": [
        "Для проверки UI",
        "Для выявления ошибок на границах допустимых значений",
        "Для проверки безопасности",
        "Для проверки скорости загрузки"
      ],
      "answer": 1
    },
    {
      "question": "Что такое таблица принятия решений?",
      "options": [
        "Документ для управления задачами",
        "Таблица, описывающая разные комбинации условий и соответствующие действия",
        "Диаграмма бизнес-процесса",
        "Форма отчета по багам"
      ],
      "answer": 1
    },
    {
      "question": "Что означает метод 'состояний и переходов'?",
      "options": [
        "Переход от одной роли к другой",
        "Проверка навигации по сайту",
        "Тестирование различных состояний системы и переходов между ними",
        "Анализ ошибок при переходах между средами"
      ],
      "answer": 2
    },
    {
      "question": "Чем полезна техника попарного тестирования (pairwise)?",
      "options": [
        "Позволяет протестировать каждую комбинацию всех параметров",
        "Позволяет протестировать все пары значений параметров, снижая общее количество тестов",
        "Применяется для тестирования безопасности",
        "Используется только в автоматизации"
      ],
      "answer": 1
    },
    {
      "question": "Какой метод поможет определить, какие тесты нужны, если система зависит от порядка шагов?",
      "options": ["Граничные значения", "Попарное тестирование", "Диаграмма состояний", "Тестирование по чек-листу"],
      "answer": 2
    },
    {
      "question": "Что такое позитивное тестирование?",
      "options": [
        "Проверка того, как система ведёт себя при некорректных данных",
        "Проверка, что система работает при правильных входных данных",
        "Проверка UI-стилей",
        "Создание тест-кейсов вручную"
      ],
      "answer": 1
    },
    {
      "question": "Что такое негативное тестирование?",
      "options": [
        "Проверка сценариев, при которых система должна обрабатывать ошибки",
        "Проверка документации",
        "Проверка только бизнес-логики",
        "Тестирование внешнего вида"
      ],
      "answer": 0
    },
    {
      "question": "Какая техника подходит для тестирования условий с множеством вариантов 'если/иначе'?",
      "options": ["Эквивалентное разбиение", "Анализ граничных значений", "Таблица принятия решений", "Попарное тестирование"],
      "answer": 2
    },
    {
      "question": "Что важно при использовании техник тест-дизайна?",
      "options": [
        "Чистота кода",
        "Понимание бизнес-требований и логики работы системы",
        "Уровень покрытия автотестами",
        "Платформа тестирования"
      ],
      "answer": 1
    }
  ]
}
]
